#!/bin/bash
explain=0
lessc=0
function help_f (){
    printf "Aioi, one command for all system informations on linux\n"
    printf "        Usage:\n"
    printf "        help    : Show this message\n"
    printf "        ram     : Show ram informations, usage\n"
    printf "        cpu     : Show cpu informations, usage\n"   
    printf "        gpu     : Show gpu informations, usage\n"
    printf "        network : Show network informations\n"
    printf "        screen  : Show screen informations\n"
    printf "        disks   : Show disks informations\n"
    printf "        bios    : Show bios (or uefi) and motherboard informations\n"
    printf "        errors  : Show errors of your system\n"
    printf "\n"
    printf "        additional arguments, passed after the command\n"
    printf "        -e : Show the original commands, and other useful commands\n"
    printf "        -l : use the less command to not litter your terminal\n"
return 0
}

function errors_f () {
    if [[ "$explain" == "1" ]];then
        printf "used commands:\n"
        printf "journalctl -p err -b --no-pager --system\n"
        printf "journalctl -p err -b --no-pager --dmesg\n"
        printf "journalctl -p err -b --no-pager --user\n"
        printf "journalctl -p err -b --no-pager\n"
        printf "journalctl --disk-usage\n"
    fi
    if [[ "$explain" == "0" ]];then
        printf "Show system errors:\n"
        journalctl -p err -b --no-pager --system
        printf "\n"
        printf "Show kernel errors:\n"
        journalctl -p err -b --no-pager --dmesg
        printf "\n"
        printf "Show current user errors:\n"
        journalctl -p err -b --no-pager --user
        printf "\n" 
        printf "Show how many space take the logs:\n"
        journalctl --disk-usage
    fi
return 0
}

function bios_f () {
    if [[ "$explain" == "1" ]];then
        printf "Used commands:\n"
        printf "efibootmgr -v\n"
        printf "sudo dmidecode -t 0\n"
        printf "sudo dmidecode -t 13\n"
        printf "sudo dmidecode -t 3\n"
        printf "sudo dmidecode --type baseboard\n"
        printf "Other useful commands:\n"
        printf "sudo inxi -M\n"
        printf "sudo lshw\n"
        printf "dmesg | grep DMI:\n"
        printf "sudo dmidecode -t\n"
    fi
    if [[ "$explain" == "0" ]];then
        if [[ -d "/sys/firmware/efi" ]];then
            printf "Showing UEFI boot order\n"
            if [[ "$explain" == "3" ]];then
                :
            elif ! command -v efibootmgr &> /dev/null ;then
                printf "command efibootmgr not found, install the package\n"
            else
                efibootmgr -v
            fi
        fi
        if [ "$EUID" -ne 0 ];then 
            printf "To show more bios informations, please run as root\n"
            printf "Mini bios informations:\n"
            cat /sys/devices/virtual/dmi/id/board_{vendor,name,version}

        else
            if [[ "$explain" == "3" ]];then
                :
            elif ! command -v dmidecode &> /dev/null ;then
                printf "command dmidecode not found, install the package\n"
                printf "Show small motherboard info:\n"
                cat /sys/devices/virtual/dmi/id/board_{vendor,name,version}
            else
                printf "Show bios informations:\n"
                sudo dmidecode -t 0
                printf "Show other bios informations:\n"
                sudo dmidecode -t 13
                printf "show the most other bios informations:\n"
                sudo dmidecode -t 3
                printf "Show motherboard informations:\n"
                sudo dmidecode --type baseboard
            fi
        fi
    fi
return 0
}

function disks_f () {
    if [[ "$explain" == "1" ]];then
        printf "used commands\n"
        printf "lsblk --output NAME,SIZE,FSUSED,TYPE,MOUNTPOINT,FSTYPE\n"
        printf "lsblk --output NAME,UUID\n"
        printf "lsblk --output NAME,LABEL,PARTLABEL,PARTFLAGS\n"
        printf "sudo hdparm -I /dev/sda\n"
        printf "lshw -class disk -class storage\n"
        printf "lshw -short -C disk\n"
        printf "sudo iostat --pretty --human\n"
        printf "Disk health command ( smartctl )\n"
        printf "check support for smartcl for a disk:\n"
        printf "smartctl -i /dev/sda\n"
        printf "to make tests:\n"
        printf "smartctl --test=short /dev/sda\n"
        printf "or smartctl --test=long /dev/sda\n"
        printf "to get the output of the test:\n"
        printf "smartctl -a /dev/sda\n"
        printf "For checking badblocks:\n"
        printf "badblocks -nvs /dev/sdx\n"
        printf "Other helpful commands:\n"
        printf "lsof ( path to mounted disk )\n"
        printf "cat /etc/fstab\n"
        printf "fdisk -l\n"
        printf "iotop -o\n"
        printf "ioping /dev/sdx\n"
        printf "Benchmarking:\n"
        printf "sudo hdparm -tT /dev/sdx\n"
        printf "dd if=/dev/zero of=benchfile bs=4k count=200000 && sync; rm benchfile\n"
        printf "dd if=/dev/zero of=/tmp/test2.img bs=512 count=1000 oflag=dsync\n"
    fi
    if [[ "$explain" == "0" ]];then
        printf "Show information about the partitions\n"
        lsblk --output NAME,SIZE,FSUSED,TYPE,MOUNTPOINT,FSTYPE
        printf "\n"
        printf "Show partitions UUID\n"
        lsblk --output NAME,UUID
        printf "\n"
        printf "Show partition label and flags\n"
        lsblk --output NAME,LABEL,PARTLABEL,PARTFLAGS
        printf "\n"
        if [ "$EUID" -ne 0 ];then 
            printf "To show disk informations, please run as root\n"
        else
            if [[ "$explain" == "3" ]];then
                :
            elif ! command -v lshw &> /dev/null ;then
                printf "command lshw not found, using other commands, for better informations install the package\n"
                if [[ "$explain" == "3" ]];then
                    :
                elif ! command -v hdparm &> /dev/null ;then
                    printf "command hdparm not found, install the package\n"
                else
                    sudo hdparm -I $(lsblk --output NAME | sed '/^[[:alpha:]]*$/!d' | egrep -v "NAME" | while read line; do echo /dev/${line}; done)
                fi
            else
                printf "Show disk informations\n"
                lshw -class disk -class storage
                printf "\n"
                printf "Show simple disk names\n"
                lshw -short -C disk
            fi
            printf "\n"
            printf "Show disk read writes in real time\n"
            if [[ "$explain" == "3" ]];then
                :
            elif ! command -v iostat &> /dev/null ;then
                printf "command iostat not found, install the iotop package\n"
            else
                sudo iostat --pretty --human
            fi
            printf "For disk health, look at the -e argument\n"
        fi
    fi
return 0
}

function network_f () {
    if [[ "$explain" == "1" ]];then
        printf "Used commands:\n"
        printf "ip a\n"
        printf "ifconfig\n"
        printf "systemctl status NetworkManager\n"
        printf "grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' /etc/resolv.conf\n"
        printf "dig google.com\n"
        printf "timedatectl status\n"
        printf "cat /etc/systemd/timesyncd.conf | grep org\n"
        printf "Full config for systemd NTP at /etc/systemd/timesyncd.conf\n"
        printf "ntpq -pn\n"
        printf "arp -e\n"
        printf "systemctl status dhcpcd\n"
        printf "cat /var/lib/dhcp/dhclient.leases\n"
        printf "ip route\n"
        printf "lsof -i\n"
        printf "Other usefull commands:\n"
        printf "netstat -rn\n"
        printf "ntpstat\n"
    fi
    if [[ "$explain" == "0" ]];then
        printf "Network interfaces informations:\n"
        if [[ "$explain" == "3" ]];then
            :
        elif ! command -v ifconfig &> /dev/null ;then
            printf "command ifconfig not found, using other commands, for better informations install the package\n"
            ip a
        else
            ifconfig -a
        fi
        printf "Show public IP received from api.apifi.org:\n"
        curl http://api.ipify.org
        printf "\n"
        printf "\n"
        printf "Show Network Manager status\n"
        systemctl --output=short status NetworkManager.service 2>1
        printf "\n"
        printf "Show systemd-network status\n"
        systemctl --output=short status systemd-networkd.service 2>1
        printf "\n"
        if [[ "$explain" == "3" ]];then
            :
        elif ! command -v dig &> /dev/null ;then
            printf "show setted DNS servers:\n"
            grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' /etc/resolv.conf
            printf "command dig not found, install the package\n"
        else
            printf "checking every DNS server from /etc/resolv.conf:\n"
            lines=$(grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' /etc/resolv.conf | wc -l)
           while [ $lines -gt 0 ];
            do
                dnsserver=$(grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' /etc/resolv.conf | head -$lines | tail +$lines)
                printf "Status for DNS server $dnsserver:\n"
                diggit=$(dig @$dnsserver google.com)
                answercheck=$(echo $diggit | grep -o "ANSWER: 1")
                if [[ -z ${answercheck} ]];then
                    printf "Answer not received, problems aquires\n"
                else
                    printf "Working correctly\n"
                fi
                lines=$(($lines-1))
            done
        fi
        printf "\n"
        printf "Show DNS by systemd:\n"
        printf "Show systemd service status:\n"
        systemctl --output=short status systemd-resolved.service 2>1
        printf "\n"
        printf "Show Specific status of this service\n"
        resolvectl status
        printf "\n"
        printf "NTP status:\n"
        printf "Systemd service status for NTP\n"
        systemctl --output=short status systemd-timesyncd.service 2>1
        printf "\n"
        printf "Show time status\n"
        timedatectl status
        printf "\n"
        printf "used NTP servers, systemd based:\n"
        cat /etc/systemd/timesyncd.conf | grep NTP
        if [[ "$explain" == "3" ]];then
            :
        elif ! command -v ntpq &> /dev/null ;then
            :
        else
            printf "NTP status, ntpq command\n"
            ntpq -pn
        fi
        printf "\n"
        printf "Show ARP table:\n"
        if [[ "$explain" == "3" ]];then
            :
        elif ! command -v arp &> /dev/null ;then
            printf "command arp not found, install the package\n"
        else
            arp -e
        fi
        printf "\n"
        printf "Show routes, default gateway\n"
        ip route
        printf "\n"
        printf "Show open ports:\n"
        lsof -i
        if [ "$EUID" -ne 0 ];then 
            printf "Running as root will show open ports by other users\n"
        else
            :
        fi
    fi
return 0
}

function screen_f () {
    if [[ "$explain" == "1" ]];then
        printf "Used command:\n"
        printf 'ls /sys/class/drm/*/edid | xargs -i{} sh -c "echo {}; parse-edid < {}\n'
        printf "Other possibly usefull commands for screen informations:\n"
        printf 'grep -i "monitor name" /var/log/syslog\n'
        printf "cat /sys/class/drm/card0-eDP-1/edid | edid-decode\n"
        printf "xrandr --prop\n"
        printf "xrandr --verbose\n"
        printf "lshw -c display\n"
    fi
    if [[ "$explain" == "0" ]];then
        printf "Show Monitor informations:\n"
        if [[ "$explain" == "3" ]];then
            :
        elif ! command -v parse-edid &> /dev/null ;then
            printf "parse-edid command not found, install the package for it\n"
        else
            ls /sys/class/drm/*/edid | xargs -i{} sh -c "echo {}; parse-edid < {}" 2> /dev/null | grep -vwE "(class|Correct)"
        fi
    fi
return 0
}

function gpu_f () {
    if [[ "$explain" == "1" ]];then
        printf "Used information commands:\n"
        printf "lspci | grep ' VGA ' | cut -d\" \" -f 1 | xargs -i lspci -v -k -s {}\n"
        printf "glxinfo -B\n"
        printf "Other information commands:\n"
        printf "sudo lshw -numeric -C display\n"
        printf "inxi -G\n"
        printf "All usage commands:\n"
        printf "For nvidia cards:\n"
        printf "nvidia-smi\n"
        printf "nvtop\n"
        printf "For radeon cards:\n"
        printf "radeontop\n"
        printf "aticonfig --odgc --odgt\n"
        printf "For intel cards:\n"
        printf "sudo intel_gpu_top\n"
        printf "intel_gpu_time (Launch a application)\n"
        printf "Benchmark / stress command:\n"
        printf "glxgears\n"
    fi
    if [[ "$explain" == "0" ]];then
        printf "GPU informations:\n"
        lspci | grep ' VGA ' | cut -d" " -f 1 | xargs -i lspci -v -k -s {}
        printf "Opengl and mesa informations:\n"
        if [[ "$explain" == "3" ]];then
        :
        elif ! command -v glxinfo &> /dev/null ;then
            printf "glxinfo command not found, install the package for it\n"
        else
            glxinfo -B
        fi
        printf "Specific GPU usage commands:\n"
        gpuinfo=$(lspci | grep ' VGA ' | cut -d" " -f 1 | xargs -i lspci -v -k -s {})
        yesnvidia=$(echo $gpuinfo | grep -oih 'nvidia')
        yesamd=$(echo $gpuinfo | grep -oih 'amd')
        yesamd=$(echo $gpuinfo | grep -oih 'ati')
        yesintel=$(echo $gpuinfo | grep -oih 'intel')
        if [[ -z ${yesnvidia} ]];then
            :
        else
            printf "For nvidia cards:\n"
            printf "nvidia-smi\n"
            printf "nvtop\n"
        fi
        if [[ -z ${yesnamd} ]];then
            :
        else
            if [[ -z ${yesnvidia} ]];then
                printf "\n"
            fi
            printf "For radeon cards:\n"
            printf "radeontop\n"
            printf "aticonfig --odgc --odgt\n"
        fi
        if [[ -z ${yesintel} ]];then
            :
        else
            if [[ -z ${yesnvidia} ]];then
                :
            else
                printf "\n"
            fi
            printf "For intel cards:\n"
            printf "sudo intel_gpu_top\n"
            printf "intel_gpu_time (Launch a application)\n"
        fi
    fi
return 0
}

function cpu_f () {
    if [[ "$explain" == "1" ]];then
    printf "Used information command:\n"
    printf "lscpu\n"
    printf "More commands for more informations:\n"
    printf "cat /proc/cpuinfo\n"
    printf "dmidecode --type processor\n"
    printf "inxi -C\n"
    printf "lshw -class processor\n"
    printf "benchmark / stress command:\n"
    printf "stress --cpu $(nproc)\n"
    fi
    if [[ "$explain" == "0" ]];then
        printf "To show cpu usage use the htop command\n"
        printf "To show informations about the usage, use the the mpstat –P ALL command\n"
        printf "\n"
        printf "How to read the mpstat command:\n"
        printf "usr – cpu usage at the user level\n"
        printf "nice – cpu usage for user processes labeled with nice\n"
        printf "sys – cpu usage at the system (Linux kernel) level\n"
        printf "iowait – cpu usage idling waiting on a disk read/write\n"
        printf "irq – cpu usage handling hardware interrupts\n"
        printf "soft – cpu usage handing software interrupts\n"
        printf "steal – cpu usage being forced to wait for a hypervisor handling other virtual processors\n"
        printf "guest –  cpu usage spent running a virtual processor\n"
        printf "idle –  cpu usage on idle time (no processes, and not waiting on a disk read/write)\n"
        printf "\n"
        printf "CPU informations:\n"
        if [[ "$explain" == "3" ]];then
            :
        elif ! command -v lscpu &> /dev/null ;then
            printf "command lscpu not found, using other commands, for better informations install the package\n"
            cat /proc/cpuinfo
        else
            lscpu
        fi
    fi
return 0
}

function ram_f () {
    if [[ "$explain" == "1" ]];then
        printf "RAM usage command:\n"
        printf "free -h -w\n"
        printf "for RAM informations:\n" 
        printf "RAM usage:\n"
        printf "dmidecode --type memory\n"
        printf "cat /proc/sys/vm/swappiness\n"
    fi
    if [[ "$explain" == "0" ]];then
        free -h -w
        printf 'More specific informations about usage are avaible under "less /proc/meminfo" command'
        printf "\n"  
        printf "\n"    
        printf "RAM informations:"
        printf "\n"  
        if [ "$EUID" -ne 0 ];then 
            printf "Please run as root to get this informations"
        elif  ! command -v dmidecode &> /dev/null;then
            echo "dmidecode command could not be found, install the package for it\n"
        else
            dmidecode --type memory
        fi
        printf "Setted swappiness:\n"
        cat /proc/sys/vm/swappiness
    fi
return 0
}

if [[ -z ${1} ]];then
        help_f
fi
if [[ "$2" == "-e" ]];then
        explain=1
elif  [[ "$2" == "-l" ]];then
        lessc=1
fi

if [[ "$3" == "-e" ]];then
    explain=1
elif  [[ "$3" == "-l" ]];then
        lessc=1
fi
while  [ ! -z "$1" ]; do
    if [[ "$1" == "help" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]];then
        if [[ "$lessc" == "1" ]];then
            help_f | less
        else
            help_f
        fi
    elif [[ "$1" == "ram" ]];then
        if [[ "$lessc" == "1" ]];then
            ram_f | less
        else
            ram_f
        fi
    elif [[ "$1" == "cpu" ]];then
        if [[ "$lessc" == "1" ]];then
            cpu_f | less
        else
            cpu_f
        fi    
    elif [[ "$1" == "gpu" ]];then
        if [[ "$lessc" == "1" ]];then
            gpu_f | less
        else
            gpu_f
        fi    
    elif [[ "$1" == "screen" ]];then
        if [[ "$lessc" == "1" ]];then
            screen_f | less
        else
            screen_f
        fi    
    elif [[ "$1" == "network" ]];then
        if [[ "$lessc" == "1" ]];then
            network_f | less
        else
            network_f
        fi    
    elif [[ "$1" == "disks" ]];then
        if [[ "$lessc" == "1" ]];then
           disks_f | less
        else
            disks_f
        fi    
    elif [[ "$1" == "bios" ]];then
        if [[ "$lessc" == "1" ]];then
            bios_f | less
        else
            bios_f
        fi    
    elif [[ "$1" == "errors" ]];then
        if [[ "$lessc" == "1" ]];then
            errors_f | less
        else
            errors_f
        fi    
    else
        help_f
    fi
shift
done
